#ifndef __CPU_BSO_HH__
#define __CPU_BSO_HH__

#include "../include/config.h"
#include "../include/Population.h"
#include "../include/CEC2014.h"
#include "../include/Random.h"
#include "../include/Cluster.h"
#include "../include/utc_time_stamp.h"

class CPU_BSO
{
private:
	natural					current_feval_;										//current fitness evaluation times
	natural					size_pop_;											//size of population
	natural					dim_;												//dimension of problem
	natural					max_iteration_;										//the max generation of loop

	double					step_size_base_;									//step size value for BSO
	double					p_replace_centre_rand_;								//probility of randomly replace one centre of clusters
	double					p_select_cluster_one_or_two_;						//probility of deciding whether select one or two clusters
	double					p_use_centre_one_cluster_;							//probility of choosen centre or population individuals when choosen one cluster model
	double					p_use_centre_two_cluster_;							//probility of choosen centre or population individuals when choosen two clusters model
	double					pr_;
	Cluster *				cluster_;											//object of cluster, it clusters the population

	Population *			population_;										//object of population, it stores all the infomation of population, which is independent with BSO
	Population *			population_candidate_;								//object of population, it stores all the infomation of the candidate population generated by BSO

	Random *				random_;											//object of random, it stores all the information of random number sequence, the length is decide by BSO

	CEC2014 *				CEC2014_;											//object of CEC2014, it is used for fitness evaluation
	void					SelectOneCluster(double * copy_rand, int starter_rand, int num_cluster, int index_pop, double *probi_mem_cluster, int * num_accum_mem_cluster, \
							int * num_mem_cluster, int * mem_cluster, double * pop_candidate, double * pop, double * centre);
	void					SelectTwoCluster(double * copy_rand, int starter_rand, int num_cluster, int index_pop, int * num_accum_mem_cluster, \
							int * num_mem_cluster, int * mem_cluster, double * pop_candidate, double * pop, double * centre);
	error					Applystrategy(int start_rand);									//apply the stragety of BSO to generate candidata population
	error					LoopAllocationRandSequence();						//allocate random numbers in each loop
	error					EvaluateFitness(double * fval, double * pop);		//evalate the candidate population by test functions
	error					GenerateNewPop();									//generate new population by original population and candidate population

	void					RecordResults(double duration_computation);			//record the result to files
	void					DisplayResults(double duration_computation);		//display the results in cmd window

	void					set_step_size_base(int max_iteration, int current_iteration);	//calculate the base value of step size value

	double					GetTime();											//get the current time


#ifdef HOSTCURAND
	error					InitiPop();											//initialize the population
	error					Generate_rand_sequence();							//generate the random sequence 
#endif
public:
							CPU_BSO(natural ID_func, natural run, natural size_pop, natural dim, int seed, \
								int num_cluster, double	p_replace_centre_rand, double p_select_cluster_one_or_two, \
								double p_use_centre_one_cluster, double p_use_centre_two_cluster, double pr);	//constrcuction function of CPU_BSO
							~CPU_BSO();
#ifdef IMPORT_RAND
	void					RandFileToHost(char * name_file_unif, char * name_file_norm);								//load random number sequence from file to memory
#endif
	error					BSO();																						//BSO main program to optimize
#ifdef DEBUG
	void					Check(int level);																			//check intermediate variable
#endif
};
#endif